/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import errors.interpreter.*;
import errors.compiler.*;
import errors.eval.*;

import node.*;
import node.arithmetic.ASTNeg;
import node.arithmetic.*;
import node.block.*;
import node.types.*;

import env.*;

import compiler.Compiler;

import java.util.HashSet;

/** ID lister. */
public class Parser implements ParserConstants {
    /** Main entry point. */
    public static void main(String args[]) {
        if (args.length >= 1 && !(args[0].equals("-c") || args[0].equals("-p"))) {
          System.out.println("Please use -c for compiling, -p for parsing or nothing for both.");
          System.exit(-1);
        }

        parser.Parser parser = new parser.Parser(System.in);

        ASTNode exp;
        Compiler compiler = null;
        Environment env = null;

        while (true) {
            try {
                exp = parser.Start();

                if (args.length == 0 || args[0].equals("-c")) {
                    compiler = new Compiler();
                    exp.compile(compiler);
                    compiler.end();
                }

                if (args.length == 0 || args[0].equals("-p")) {
                    env = new Environment();
                    System.out.println("Result: " + exp.eval(env));
                    System.out.println();
                }
            } catch (Exception e) {
                handleErrors(e, compiler, env);
                parser.ReInit(System.in);
            }
        }
    }

    /*
        UTILS
    */
    private static void handleErrors(Exception e, Compiler compiler, Environment env) {
      boolean expected = false;

        if (e instanceof CompilerException) {
            expected = true;

            try {
              compiler.deleteGeneratedFiles();
            } catch (CompilerException ce) {
              System.err.println(ce.getMessage());
            }
        }

        if (e instanceof EvaluationException || e instanceof InterpreterException)
            expected = true;

        if (expected)
           System.err.println(e.getMessage());
        else
          e.printStackTrace();
    }

  static final public ASTNode Start() throws ParseException {
  ASTNode n;
    n = Exp();
    jj_consume_token(EL);
     {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {
  parser.Token op;
  ASTNode n1, n2;
    n1 = Term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = Term();
          if (op.kind == PLUS)
              n1 = new ASTAdd(n1, n2);
          else
              n1 = new ASTSub(n1, n2);
    }
      {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {
    Token op;
    ASTNode n1;
    ASTNode n2;
    n1 = Fact();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
    case DIV:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        op = jj_consume_token(TIMES);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = Term();
        if (op.kind == TIMES)
          n1 = new ASTMul(n1, n2);
        else
          n1 = new ASTDiv(n1, n2);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact() throws ParseException {
    Token t;
    ASTNode n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      t = jj_consume_token(Num);
                    n = new ASTNum(Integer.parseInt(t.image));
      break;
    case MINUS:
      jj_consume_token(MINUS);
      n = Exp();
                              n = new ASTNeg(n);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      n = Exp();
      jj_consume_token(RPAR);
      break;
    case LET:
      jj_consume_token(LET);
      n = Decl();
      jj_consume_token(END);
      break;
    case Id:
      t = jj_consume_token(Id);
                     n = new ASTVar(t.image);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Decl() throws ParseException {
  HashSet<ASTAssignVar> assignments;
  ASTNode n;
    assignments = Assign();
    jj_consume_token(IN);
    n = Exp();
      {if (true) return new ASTBlock(assignments, n);}
    throw new Error("Missing return statement in function");
  }

  static final public HashSet Assign() throws ParseException {
    Token t;
    ASTNode n;
    HashSet<ASTAssignVar> assignments;
      assignments = new HashSet<ASTAssignVar>();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(Id);
      jj_consume_token(EQ);
      n = Exp();
            assignments.add(new ASTAssignVar(t.image, n));
    }
      {if (true) return assignments;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60,0x60,0x180,0x180,0x22250,0x20000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
