PARSER_BEGIN(Parser)
package parser;

import interpreter.errors.*;
import compiler.errors.*;
import node.*;

import compiler.Compiler;
import interpreter.Interpreter;

/** ID lister. */
public class Parser {
    /** Main entry point. */
    public static void main(String args[]) {
        parser.Parser parser = new parser.Parser(System.in);

        ASTNode exp;
        Compiler compiler = null;
        Interpreter interpreter;

        while (true) {
            try {
                exp = parser.Start();

                // PARSE
                interpreter = new Interpreter();

                if (exp != null)
                    System.out.println("Result: " + exp.eval(interpreter));
                else
                    System.out.println("Result: null");

                System.out.println();

                // COMPILE
                // compiler = new Compiler();
                // exp.compile(compiler);
                // compiler.end();
            } catch (Exception e) {
                handleErrors(e, compiler);
                parser.ReInit(System.in);
            }
        }
    }

    /*
        UTILS
    */
    private static void handleErrors(Exception e, Compiler compiler) {
        try {
          if (compiler != null)
            compiler.deleteGeneratedFiles();
        } catch (CompileError ce) {
            System.err.println(ce.getMessage());
        }

        if (e instanceof CompileError || e instanceof InterpretationError)
            System.err.println(e.getMessage());
        else
            e.printStackTrace();
    }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  | < ADD : "+" >
  | < SUB : "-">
  | < MUL : "*">
  | < DIV : "/">
  | < LPAR : "(" >
  | < RPAR : ")" >

  // Boolean
  | < BOOL : "true" | "false" >

  // Decl
  | < EQ : "=" >
  | < LET : "let" >
  | < IN : "in" >
  | < NEW : "new" >
  | < END : "end" >

  // Blocks
  | < WHILE : "while" >
  | < DO : "do" >
  | < IF : "if" >
  | < THEN : "then" >
  | < ELSE : "else" >

  // Symbols
  | < PROGRAM_END : ";;" >
  | < SEQ_END : ";" >
  | < DEREF : "!" >
  | < APPLY : ":=" >

  // Relational
  | < EQEQ : "==" >
  | < DIFFERS : "<>" >
  | < GREATER : ">" >
  | < LOWER : "<" >
  | < GREATER_EQ : ">=" >
  | < LOWER_EQ : "<=" >

  // Logical
  | < AND : "&&" >
  | < OR : "||" >
  | < COMP : "~" >

  // Functions
  | < FUNC : "fun" >
  | < FUNCSTART : "->">
  | < COLON : ":">
  | < COMMA : ",">

  // Types
  | < TYPEINT : "int" >
  | < TYPEBOOL : "bool" >
  | < TYPESTRUCT : "struct" >
  | < TYPESTRING : "string" >
  | < REFTYPE : "ref">

  // Structures
  | < FIELD : "." >
  | < LBRKT : "{" >
  | < RBRKT : "}" >

  // STRINGS
  | < STRING: ( "[^\"]" )+ >
  | < QUOTE : "\"" >

  // Commands
  | < PRINT : "println" >

  //-------
  | < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

ASTNode Start():
{
  ASTNode n = null;
}
{
   ( n = Seq() ) ? <PROGRAM_END>
   { return n; }
}

ASTNode Seq() :
{
    ASTNode n1, n2;
}
{
    n1 = Log() ( <SEQ_END> n2 = Seq() { n1 = new ASTSeq(n1, n2); } ) ?

    { return n1; }
}

ASTNode Log() :
{
  Token op;
  ASTNode n1, n2;
}
{
    n1 = Exp()

    (
        (
             op = <EQEQ> | op = <DIFFERS>
             | op = <GREATER> | op = <LOWER>
             | op = <GREATER_EQ> | op = <LOWER_EQ>
             | op = <AND> | op = <OR>
        )

        n2 = Exp()

        {
            if (op.kind == EQEQ)
                n1 = new ASTRelational(RelationalOperation.EQUALS , n1, n2);
            if (op.kind == DIFFERS)
                n1 = new ASTRelational(RelationalOperation.DIFFERS , n1, n2);
            if (op.kind == GREATER)
                n1 = new ASTRelational(RelationalOperation.GREATER_THAN , n1, n2);
            if (op.kind == LOWER)
                n1 = new ASTRelational(RelationalOperation.LOWER_THAN , n1, n2);
            if (op.kind == GREATER_EQ)
                n1 = new ASTRelational(RelationalOperation.GREATER_OR_EQUALS , n1, n2);
            if (op.kind == LOWER_EQ)
                n1 = new ASTRelational(RelationalOperation.LOWER_OR_EQUALS , n1, n2);
            if (op.kind == AND)
                n1 = new ASTLogical(LogicalOperation.AND, n1, n2);
            if (op.kind == OR)
                n1 = new ASTLogical(LogicalOperation.OR, n1, n2);
        }
    ) *

    { return n1; }
}

ASTNode Exp() :
{
  Token op;
  ASTNode n1, n2;
}
{
    n1 = Term()

    (
        ( op = <ADD> | op = <SUB> )

        n2 = Term()

        {
            if (op.kind == ADD)
                n1 = new ASTArithmetic(ArithmeticOperation.ADD, n1, n2);
            if (op.kind == SUB)
                n1 = new ASTArithmetic(ArithmeticOperation.SUB, n1, n2);
        }
    ) *

    { return n1; }
}

ASTNode Term() :
{
    Token op;
    ASTNode n1, n2;
}
{
  n1 = Fact()

  (
    ( op = <MUL> | op = <DIV> )

    n2 = Term()
    {
        if (op.kind == MUL)
          n1 = new ASTArithmetic(ArithmeticOperation.MUL, n1, n2);
        if (op.kind == DIV)
          n1 = new ASTArithmetic(ArithmeticOperation.DIV, n1, n2);
    }
  ) ?
  { return n1; }
}

ASTNode Fact() :
{
    Token t;
    ASTNode n1, n2, n3;
}
{
    (
        n1 = Init()
        | <SUB> n1 = Log() { n1 = new ASTNeg(n1); }
        | <COMP> n1 = Log() { n1 = new ASTComp(n1); }
        | <LPAR> n1 = Log() <RPAR> ( <APPLY> n2 = Log() { n1 = new ASTApply(n1, n2); } ) ?
        | <LET> n1 = Decl() <END>
        | <WHILE> n1 = Log() <DO> n2 = Seq() <END> { n1 = new ASTWhile(n1, n2); }
        | <IF> n1 = Log() <THEN> n2 = Seq() <ELSE> n3 = Seq() <END> { n1 = new ASTIf(n1, n2, n3); }
        | <PRINT> n1 = Val() { n1 = new ASTPrint(n1); }
        | n1 = Val()
    )

    { return n1; }
}

ASTNode Val() :
{
    Token t1, t2;
    ASTNode n1, n2;
    VStruct v;
    ArrayList<ASTNode> funParams;
}
{
    Lit()
    | <DEREF> t1 = <Id> { return new ASTDeref(t1.image); }
    | <LBRKT> v = Struct() { return new ASTStruct(v); } <RBRKT>
    | t1 = <Id>  { n1 = new ASTVar(t1.image); }
        (
            <APPLY> n2 = Log() { return new ASTApply(n1, n2); }
            | <FIELD> t2 = <Id> { return new ASTStructDeref(t1.image, t2.image); }
            | <LPAR>
                    { funParams = new ArrayList<ASTNode>(); }
                    (
                        <RPAR> { return new ASTFunCall(n1); }
                        | n2 = Log() { funParams.add(n2); }
                            ( <COMMA> n2 = Log() { funParams.add(n2); } )*
                          <RPAR> { return new ASTFunCall(n1, funParams); }

                    )

        )
}

ASTNode Lit() :
{
    Token t;
    IValue v;
}
{
    t = <Num> { return new ASTInt(new VInt(Integer.parseInt(t.image))); }
    | t = <BOOL> { return new ASTBool(new VBool(Boolean.parseBoolean(t.image))); }
    | <QUOTE> t = <STRING> { return new ASTString(new VString(t.image)); } <QUOTE>
}

ASTNode Decl() :
{
  Token t;
  IType type;
  ASTNode n;
  ArrayList<ASTAssign> assignments;
}
{
    { assignments = new ArrayList<ASTAssign>(); }

    (
        t = <Id> <COLON> (
            ( <REFTYPE> type = Singleton() <EQ> n = Init() )
            | type = FunType() <EQ> n = Init() { n = new ASTFun(type, n); }
        )
        { assignments.add(new ASTAssign(t.image, n)); }
    )*
    <IN> n = Seq()

    { return new ASTLet(n, assignments); }
}

IType FunType() :
{
    IType t;
    ArrayList<IType> paramTypes;
}
{
   { paramTypes = new ArrayList<IType>(); }

   <LPAR> ( t = Singleton() { paramTypes.add(t); } ( <COMMA> t = Singleton() { paramTypes.add(t); } )* )?
   <RPAR> ( t = Singleton() { return new TFun(paramTypes, t); } | { return new TFun(paramTypes); } )
}

ASTNode Init() :
{
    Token t;
    ASTNode n;
    VStruct v;
    ArrayList<ASTFunParam> funParams;
}
{

    <NEW> (
        t = <Num> { return new ASTInit(new VInt(Integer.parseInt(t.image))); }
        | t = <BOOL> { return new ASTInit(new VBool(Boolean.parseBoolean(t.image))); }
        | t = <Id> { return new ASTInit(new VRef(t.image)); }
        | <QUOTE> t = <STRING> { return new ASTInit(new VString(t.image)); } <QUOTE>
        | <LBRKT> v = Struct() { return new ASTInit(v); } <RBRKT>
    )
    | <FUNC>  funParams = FunParams() <FUNCSTART> n = Log() { return new ASTInit(new VFun(funParams, n)); }
}

VStruct Struct() :
{
    Token t;
    ASTNode n;
    ArrayList<ASTStructParam> structParams;
}
{
   { structParams = new ArrayList<ASTStructParam>(); }
   ( t = <Id> <EQ> n = Lit() { structParams.add(new ASTStructParam(t.image, n)); }
        ( <SEQ_END> t = <Id> <EQ> n = Lit() { structParams.add(new ASTStructParam(t.image, n)); } )* )?
   { return new VStruct(structParams); }
}

ArrayList<ASTFunParam> FunParams() :
{
  Token t;
  IType type;
  ArrayList<ASTFunParam> funParams;
}
{
    { funParams = new ArrayList<ASTFunParam>(); }

    (
       t = <Id> <COLON> type = Singleton() { funParams.add(new ASTFunParam(t.image, type)); }
       ( <COMMA> t = <Id> <COLON> type = Singleton() { funParams.add(new ASTFunParam(t.image, type)); } )*
    )?

    { return funParams; }
}

IType Singleton() :
{
}
{
    <TYPEINT> { return TInt.SINGLETON; }
   | <TYPEBOOL> { return TBool.SINGLETON; }
   | <TYPESTRUCT> { return TStruct.SINGLETON; }
   | <TYPESTRING> { return TString.SINGLETON; }
}
