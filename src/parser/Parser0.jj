PARSER_BEGIN(Parser)
package parser;

import errors.interpreter.*;
import errors.compiler.*;

import node.*;
import node.arithmetic.*;
import node.logical.*;
import node.relational.*;
import node.variable.*;
import node.types.*;
import node.block.*;

import value.*;

import compiler.Compiler;
import interpreter.Interpreter;

import java.util.HashSet;

/** ID lister. */
public class Parser {
    /** Main entry point. */
    public static void main(String args[]) {
        parser.Parser parser = new parser.Parser(System.in);

        ASTNode exp;
        Compiler compiler = null;
        Interpreter interpreter;

        while (true) {
            try {
                exp = parser.Start();

                // PARSE
                interpreter = new Interpreter();

                if (exp != null)
                    System.out.println("Result: " + exp.eval(interpreter));
                else
                    System.out.println("Result: null");

                System.out.println();

                // COMPILE
                compiler = new Compiler();
                // exp.compile(compiler);
                // compiler.end();
            } catch (Exception e) {
                handleErrors(e, compiler);
                parser.ReInit(System.in);
            }
        }
    }

    /*
        UTILS
    */
    private static void handleErrors(Exception e, Compiler compiler) {
        try {
          if (compiler != null)
            compiler.deleteGeneratedFiles();
        } catch (CompilerException ce) {
            System.err.println(ce.getMessage());
        }

        if (e instanceof CompilerException || e instanceof InterpreterException)
            System.err.println(e.getMessage());
        else
            e.printStackTrace();
    }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  | < ADD : "+" >
  | < SUB : "-">
  | < MUL : "*">
  | < DIV : "/">
  | < LPAR : "(" >
  | < RPAR : ")" >

  // Boolean
  | < BOOL : "true" | "false" >

  // Decl
  | < EQ : "=" >
  | < LET : "let" >
  | < IN : "in" >
  | < NEW : "new" >
  | < END : "end" >

  // Blocks
  | < WHILE : "while" >
  | < DO : "do" >
  | < IF : "if" >
  | < THEN : "then" >
  | < ELSE : "else" >

  // Symbols
  | < PROGRAM_END : ";;" >
  | < SEQ_END : ";" >
  | < DEREF : "!" >
  | < APPLY : ":=" >

  // Relational
  | < EQEQ : "==" >
  | < DIFFERS : "<>" >
  | < GREATER : ">" >
  | < LOWER : "<" >
  | < GREATER_EQ : ">=" >
  | < LOWER_EQ : "<=" >

  // Logical
  | < AND : "&&" >
  | < OR : "||" >
  | < COMP : "~" >

  //-------
  | < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

ASTNode Start():
{
  ASTNode n = null;
}
{
   ( n = Seq() ) ? <PROGRAM_END>
   { return n; }
}

ASTNode Seq() :
{
    ASTNode n1, n2;
}
{
    n1 = Log() ( <SEQ_END> n2 = Seq() { n1 = new ASTSeq(n1, n2); } ) ?

    { return n1; }
}

ASTNode Log() :
{
  Token op;
  ASTNode n1, n2;
}
{
    n1 = Exp()

    (
        (
             op = <EQEQ> | op = <DIFFERS> | op = <GREATER> | op = <LOWER>
             | op = <GREATER_EQ> | op = <LOWER_EQ>
             | op = <AND> | op = <OR>
        )

        n2 = Log()

        {
            if (op.kind == EQEQ)
                n1 = new ASTRelational(RelationalOperation.EQUALS , n1, n2);
            if (op.kind == DIFFERS)
                n1 = new ASTRelational(RelationalOperation.DIFFERS , n1, n2);
            if (op.kind == GREATER)
                n1 = new ASTRelational(RelationalOperation.GREATER_THAN , n1, n2);
            if (op.kind == LOWER)
                n1 = new ASTRelational(RelationalOperation.LOWER_THAN , n1, n2);
            if (op.kind == GREATER_EQ)
                n1 = new ASTRelational(RelationalOperation.GREATER_OR_EQUALS , n1, n2);
            if (op.kind == LOWER_EQ)
                n1 = new ASTRelational(RelationalOperation.LOWER_OR_EQUALS , n1, n2);
            if (op.kind == AND)
                n1 = new ASTLogical(LogicalOperation.AND, n1, n2);
            if (op.kind == OR)
                n1 = new ASTLogical(LogicalOperation.OR, n1, n2);
        }
    ) *

    { return n1; }
}

ASTNode Exp() :
{
  Token op;
  ASTNode n1, n2;
}
{
    n1 = Term()

    (
        ( op = <ADD> | op = <SUB> )

        n2 = Term()

        {
            if (op.kind == ADD)
                n1 = new ASTArithmetic(ArithmeticOperation.ADD, n1, n2);
            if (op.kind == SUB)
                n1 = new ASTArithmetic(ArithmeticOperation.SUB, n1, n2);
        }
    ) *

    { return n1; }
}

ASTNode Term() :
{
    Token op;
    ASTNode n1, n2;
}
{
  n1 = Fact()
  (
    ( op = <MUL> | op = <DIV> )

    n2 = Term()
    {
        if (op.kind == MUL)
          n1 = new ASTArithmetic(ArithmeticOperation.MUL, n1, n2);
        else
          n1 = new ASTArithmetic(ArithmeticOperation.DIV, n1, n2);
    }
  ) ?
  { return n1; }
}

ASTNode Fact() :
{
    Token t;
    ASTNode n1, n2, n3;
}
{
    (
        <NEW> (
            t = <Num> { n1 = new ASTInit(new VInt(Integer.parseInt(t.image))); }
            | t = <BOOL> { n1 = new ASTInit(new VBool(Boolean.parseBoolean(t.image))); }
        )
        | <DEREF> t = <Id> { n1 = new ASTDeref(t.image); }
        | t = <Num> { n1 = new ASTNum(new VInt(Integer.parseInt(t.image))); }
        | t = <BOOL> { n1 = new ASTBool(new VBool(Boolean.parseBoolean(t.image))); }
        | <SUB> n1 = Exp() { n1 = new ASTNeg(n1); }
        | <COMP> n1 = Exp() { n1 = new ASTComp(n1); }
        | <LPAR> n1 = Exp() <RPAR>
        | <LET> n1 = Decl() <END>
        | <WHILE> n1 = Exp() <DO> n2 = Exp() <END> { n1 = new ASTWhile(n1, n2); }
        | <IF> n1 = Exp() <THEN> n2 = Exp() <ELSE> n3 = Exp() <END> { n1 = new ASTIf(n1, n2, n3); }
        | t = <Id> { n1 = new ASTVar(t.image); }
    )
    { return n1; }
}

ASTNode Decl() :
{
  HashSet<ASTAssign> assignments;
  ASTNode n;
  Token t;
}
{
    { assignments = new HashSet<ASTAssign>(); }

    (
        t = <Id> <EQ> n = Exp()
        {
          assignments.add(new ASTAssign(t.image, n));
        }
    ) *
    <IN> n = Exp()

    { return new ASTLet(n, assignments); }
}