PARSER_BEGIN(Parser)
package parser;

import errors.interpreter.*;
import errors.compiler.*;
import errors.eval.*;

import node.*;

import env.*;

import compiler.Compiler;

/** ID lister. */
public class Parser {
    /** Main entry point. */
    public static void main(String args[]) {
        parser.Parser parser = new parser.Parser(System.in);

        ASTNode exp;
        Compiler compiler = null;
        Environment env = null;

        while (true) {
            try {
                exp = parser.Start();

                // PARSE
                env = new Environment();
                System.out.println("Result: " + exp.eval(env).toString());
                System.out.println();

                // COMPILE
                // compiler = new Compiler();
                // exp.compile(compiler);
                // compiler.end();
            } catch (Exception e) {
                handleErrors(e, compiler, env);
                parser.ReInit(System.in);
            }
        }
    }

    /*
        UTILS
    */
    private static void handleErrors(Exception e, Compiler compiler, Environment env) {
        boolean expected = false;

        try {
            compiler.deleteGeneratedFiles();
        } catch (CompilerException ce) {
            System.err.println(ce.getMessage());
        }

        if (e instanceof CompilerException || e instanceof InterpreterException)
            System.err.println(e.getMessage());
        else
            e.printStackTrace();
    }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  | < PLUS : "+" >
  | < MINUS : "-">
  | < TIMES : "*">
  | < DIV : "/">
  | < LPAR : "(" >
  | < RPAR : ")" >
  | < EL: "\n" >

  // Boolean
  | < BOOL : "true" | "false" >

  // Decl
  | < EQ : "=" >
  | < LET : "let" >
  | < IN : "in" >
  | < NEW : "new" >
  | < END : "end" >

  // Blocks
  | < WHILE : "while" >
  | < DO : "do" >
  | < IF : "if" >
  | < THEN : "then" >
  | < ELSE : "else" >

  // Symbols
  | < PROGRAM_END : ";;" >
  | < SEQ_END : ";" >
  | < DEREF : "!" >
  | < APPLY : ":=" >

  // Relational
  | < EQEQ : "==" >
  | < DIFFERS : "<>" >
  | < GREATER : ">" >
  | < LOWER : "<" >
  | < GREATER_EQ : ">=" >
  | < LOWER_EQ : "<=" >
  | < REL : <EQEQ> | <DIFFERS> | <GREATER> | <LOWER> | <GREATER_EQ> | <LOWER_EQ> >

  // Logical
  | < AND : "&&" >
  | < OR : "||" >
  | < COMP : "~" >
  | < LOG : <AND> | <OR> | <COMP> >

  //-------
  | < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

ASTNode Start():
{
  ASTNode n;
}
{
   n = Exp() <PROGRAM_END>
   { return n; }
}

ASTNode Exp() :
{
  Token op;
  ASTNode n1, n2;
}
{

    (
        n1 = Term()

        ( op = <PLUS> | op = <MINUS> )

        n2 = Term()

        {
          if (op.kind == PLUS)
              n1 = new ASTPlus(n1, n2);
          else
              n1 = new ASTSub(n1, n2);
        }
    ) *
    |
    (
        n1 = Seq()

        ( op = <REL> | op = <LOG> )

        n2 = Seq()

        {
            switch(op.kind) {
                case EQEQ:
                    n1 = new ASTRelational(RelationalOperation.EQUALS , n1, n2);
                    break;
                case DIFFERS:
                    n1 = new ASTRelational(RelationalOperation.DIFFERS , n1, n2);
                    break;
                case GREATER:
                    n1 = new ASTRelational(RelationalOperation.GREATER_THAN , n1, n2);
                    break;
                case LOWER:
                    n1 = new ASTRelational(RelationalOperation.LOWER_THAN , n1, n2);
                    break;
                case GREATER_EQ:
                    n1 = new ASTRelational(RelationalOperation.GREATER_OR_EQUALS , n1, n2);
                    break;
                case LOWER_EQ:
                    n1 = new ASTRelational(RelationalOperation.LOWER_OR_EQUALS , n1, n2);
                    break;
                case AND:
                    n1 = new ASTLogical(LogicalOperation.AND, n1, n2);
                    break;
                case OR:
                    n1 = new ASTLogical(LogicalOperation.OR, n1, n2);
                    break;
            }
        }
    ) *

    { return n1; }
}

ASTNode Term() :
{
    Token op;
    ASTNode n1, n2;
}
{
  n1 = Seq()
  (
    ( op = <TIMES> | op = <DIV> )

    n2 = Term()
    {
        if (op.kind == TIMES)
          n1 = new ASTTimes(n1, n2);
        else
          n1 = new ASTDiv(n1, n2);
    }
  ) ?
  { return n1; }
}

ASTNode Seq() :
{
    ASTNode n1, n2;
}
{
    n1 = Fact() <SEQ_END> n2 = Exp() { n1 = new ASTSeq(n1, n2); }
    | n1 = Fact()

    { return n1; }
}

ASTNode Fact() :
{
    Token t;
    ASTNode n1, n2, n3;
}
{
    (
        n1 = <NEW> (t = <Num> | <BOOL> ) { n1 = new ASTInit(t.image); }
        | <DEREF> t = <Id> { n1 = new ASTDeref(t.image); }
        | t = <Num> { n1 = new ASTNum(Integer.parseInt(t.image)); }
        | t = <BOOL> { n1 = new ASTBool(Boolean.parseBoolean(t.image)); }
        | <MINUS> n1 = Exp() { n1 = new ASTNeg(n1); }
        | <COMP> n1 = Exp() { n1 = new ASTComp(n1); }
        | <LPAR> n1 = Exp() <RPAR>
        | <LET> n1 = Decl() <END>
        | <WHILE> n1 = Exp() <DO> n2 = Exp() <END> { n1 = new ASTWhile(n1, n2); }
        | <IF> n1 = Exp() <THEN> n2 = Exp() <ELSE> n3 = Exp() <END> { n1 = new ASTIf(n1, n2, n3); }
        | t = <Id> { n1 = new ASTVar(t.image); }
    )
    { return n1; }
}

ASTNode Decl() :
{
  HashSet<ASTAssign> assignments;
  ASTNode n;
}
{
    { assignments = new HashSet<ASTAssign>(); }

    (
        t = <Id> <EQ> n = Exp()
        {
          assignments.add(new ASTAssign(t.image, n));
        }
    ) *
    <IN> n = Exp()

    { return new ASTBlock(assignments, n); }
}